<!--
    Use this file to faciliate easy per-project building.

    Simply create a build.properties file in your project directory,
    for example ./projects/bookstore/build.properties, that contains
    any needed (i.e. to override) values for that project.

    Call this build script and specify the name of the project and
    (optionally) the name of the target you wish to execute (default is
    'main' target) of build-clonefish.xml.

    Normal use:
    $> phing   -Dproject=bookstore

    Specific target:
    $> phing -Dproject=bookstore -Dtarget=insert-sql

-->
<project name="clonefish-project-builder" default="main">

<!-- in case ${project.dir} was specified on command line, we set the project.dir
     property here.  If it wasn't set, then this will be bogus, but it will
     be overridden by the "set-project-dir" target. -->
<resolvepath propertyName="clonefish.project.dir" file="${project.dir}" dir="${application.startdir}"/>

<!-- set a default target if none provided -->
<property name="target" value="main"/>

<!-- Set a default name for the build.properties file.
		This allows for overriding the name of the build.properties file; however,
		clonefish still expects to find the file in the ${clonefish.project.dir}.
 -->
<property name="build.properties" value="build.properties"/>

<target name="check-buildprops-exists">
  <available file="${clonefish.project.dir}/${build.properties}" property="projBuildPopertiesExists"/>
</target>

<target name="check-buildprops" unless="projBuildPopertiesExists" depends="check-buildprops-exists">
		<echo message="====================================================="/>
		<echo message="Could not open ${build.properties} file:"/>
		<echo message="		${clonefish.project.dir}${build.properties}"/>
		<echo message=" "/>
		<echo message="Make sure that '${clonefish.project.dir}' is a valid path"/>
		<echo message="and that it contains a ${build.properties} file."/>
		<echo message="====================================================="/>

		<fail message="Missing configuration file (see description above)."/>
</target>

<target name="check-project-or-dir-set">
  <condition property="projectOrDirSet">
  		<or>
			<isset property="project"/>
			<isset property="project.dir"/>
		</or>
  </condition>
</target>

<target name="check-buildprops-for-clonefish-gen" if="using.clonefish-gen" unless="projBuildPopertiesExists" depends="check-buildprops-exists">
	<echo message="=========================================================="/>
	<echo message="               Welcome to Clonefish Builder!"/>
	<echo message=" "/>
	<echo message="The clonefish-gen script requires a ${build.properties} file"/>
	<echo message="to run. Either you didn't create one already, or this file"/>
	<echo message="is not where the clonefish-gen script is looking for it."/>
	<echo message=" "/>
	<echo message="Expected ${build.properties} file location is:"/>
	<echo message="  ${clonefish.project.dir}${build.properties}"/>
	<echo message=" "/>
	<echo message="The clonefish-gen script expects the name of a task to execute:"/>
	<echo message=" "/>
	<echo message="$&gt; clonefish-gen [taskname]"/>
	<echo message=" "/>
	<echo message="If you call the script from another directory than the one where"/>
	<echo message="where the ${build.properties} file is, set the path to this"/>
	<echo message="file as first argument of the script:"/>
	<echo message=" "/>
	<echo message="$&gt; clonefish-gen /path/to/projectdir [taskname]"/>
	<echo message=" "/>
	<echo message="Available tasknames are:"/>
	<echo message="  build-validation"/>
	<echo message="  build-element"/>
	<echo message="  clean"/>	
	<echo message="  clean-validation"/>
	<echo message="  clean-element"/>		
	<echo message="But you should start by creating a schema."/>
	<echo message="=========================================================="/>
	<fail message="No project directory specified."/>
</target>

<target name="check-project-set" unless="projectOrDirSet" depends="check-project-or-dir-set">
		<echo message="====================================================="/>
		<echo message="Project not specified. You must enter a project name. "/>
		<echo message="In the future you can enter it on the command line: "/>
		<echo message=" "/>
		<echo message="-Dproject=bookstore"/>
		<echo message=" "/>
		<echo message="This will attempt to find your project directory in"/>
		<echo message="the default directory (./projects/bookstore)."/>
		<echo message=" "/>
		<echo message="You can also avoid this message and specicfy a custom "/>
		<echo message="directory, using the project.dir property:"/>
		<echo message=" "/>
		<echo message="-Dproject.dir=/path/to/bookstore"/>
		<echo message="====================================================="/>
		<input propertyname="project" promptChar=":">Project name</input>
		<property name="clonefish.project" value="${project}" override="true"/>
</target>

<target name="set-project-dir" unless="project.dir" depends="check-project-set">
	<echo>No project.dir was specified, using default path: ./projects/${project}</echo>
	<property name="clonefish.project.dir" value="./projects/${project}" override="true"/>
</target>

<target name="configure" depends="set-project-dir,check-buildprops-for-clonefish-gen,check-buildprops">
	<if>
		<isset property="additional.properties"/>
		<then>
			<echo>Processing additional properties file: ${additional.properties}</echo>
			<resolvepath propertyName="additional.properties.resolved" file="${additional.properties}" dir="${application.startdir}"/>
			<property file="${additional.properties.resolved}"/>
		</then>
	</if>
	<echo msg="Loading project-specific props from ${clonefish.project.dir}/${build.properties}"/>
	<property file="${clonefish.project.dir}/${build.properties}"/>
</target>

<target name="main" depends="configure" description="The main target. Includes project-specific build.properties and calls the build-clonefish.xml script">

	<phing phingfile="./build-clonefish.xml" target="${target}"/>

</target>

<!--
 Convenience mappings to build-clonefish.xml main targets

 This makes it possible to use this buildfile w/o needing to specify
 target as a property, e.g.:

 $> phing -Dproject=bookstore insert-sql

 The main reason for this is just consistency w/ old build-clonefish.xml file
 (primarily for documentation & user confusion avoidance reasons).  There are relatively
 few & infrequently changing main targets of build-clonefish.xml, so it's a non-
 issue as far as maintenance is concerned.
-->

<target name="build-validation" depends="configure">
	<phing phingfile="build-clonefish.xml" target="build-validation"/>
</target>

<target name="build-element" depends="configure">
	<phing phingfile="build-clonefish.xml" target="build-element"/>
</target>

<target name="clean" depends="configure">
	<phing phingfile="build-clonefish.xml" target="clean"/>
</target>

<target name="clean-validation" depends="configure">
	<phing phingfile="build-clonefish.xml" target="clean-validation"/>
</target>

<target name="clean-element" depends="configure">
	<phing phingfile="build-clonefish.xml" target="clean-element"/>
</target>

</project>
